{"version":3,"file":"contentScript.b405f98db84c2c2fa0f4.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAQA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAGA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;;AAQA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAnBA;AAAA;AAAA;;AAAA;AAAA;AAqBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAHA;AAAA;;AAAA;AAIA;AACA;AACA;AANA;AAAA;;AAAA;AASA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArBA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAHA;AAAA;AAqBA;AAAA;AACA;AAAA;AACA;AAAA;;AAvBA;AAaA;AAYA;;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAllBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAutPA;AASA;AAaA;AAiBA;;;;;;;;;;;;;;;;;AC/CA","sources":["webpack://convoextension/./src/pages/Content/sections/personal.jsx","webpack://convoextension/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button, Flex } from '../../../components/Base';\r\nimport { AddIcon, ReloadIcon } from '../../../components/Icons';\r\nimport ThreadView from '../../../components/ThreadView';\r\nimport TabShell from '../../../components/TabShell';\r\nimport { Web3Context } from '../../../contexts/Web3Context';\r\n\r\nconst Input = styled.input`\r\n    width: ${props => Boolean(props.width) === true ? props.width : \"100%\"};\r\n    margin-top: 4px;\r\n    margin-bottom: 4px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    height: 30px;\r\n`;\r\n\r\nconst IconButton = styled.button`\r\n    width: ${props => (props.size === \"sm\" ? \"54\" : \"50\")}px !important;\r\n    height: ${props => (props.size === \"sm\" ? \"40\" : \"50\")}px !important;\r\n    display:flex;\r\n    cursor: pointer;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: transparent;\r\n    border-radius: 100px;\r\n    border:none;\r\n    padding: ${props => (props.size === \"sm\" ? \"4\" : \"8\")}px !important;\r\n`;\r\n\r\nlet ButtonStyled = styled.button`\r\n    border-radius: 10px;\r\n    width: ${props => Boolean(props.width) === true ? props.width : \"\"};\r\n    border: none;\r\n    margin-bottom:10px;\r\n    padding: 8px;\r\n    background-image: ${props => Boolean(props.backgroundImage) === true ? props.backgroundImage : \"\"};\r\n    background: ${props => Boolean(props.background) === true ? props.background : \"\"};\r\n    flex-direction:row;\r\n    min-height: ${props => Boolean(props.minH) === true ? props.minH : \"50px\"};\r\n    font-weight: 700;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items:center;\r\n    cursor:pointer;\r\n`;\r\n\r\nfunction Personal() {\r\n\r\n    const { signerAddress, convo, getAuthToken } = useContext(Web3Context);\r\n    let [threads, setThreads] = useState(null);\r\n    const [activeScreen, setActiveScreen] = useState('home');\r\n    const [screenData, setscreenData] = useState({});\r\n    const [searchString, setSearchString] = useState(\"\");\r\n\r\n    const searchInput = useRef();\r\n    const inputTitleRef = useRef();\r\n    const inputDescriptionRef = useRef();\r\n    const inputMembersRef = useRef();\r\n    const inputModeratorsRef = useRef();\r\n    const inputKeywordsRef = useRef();\r\n    const isReadPublicRef = useRef();\r\n    const isWritePublicRef = useRef();\r\n\r\n    useEffect(() => {\r\n        refreshThreads();\r\n    }, [])\r\n\r\n    async function refreshThreads() {\r\n        let threadsData = await convo.threads.getUserThreads(signerAddress);\r\n        if (threadsData?.success === true) {\r\n            console.log(threadsData.member.toString());\r\n            let threads = await convo.threads.getThreads(threadsData.member.toString());\r\n            console.log(threads.threads);\r\n            setThreads(threads.threads);\r\n        }\r\n        else {\r\n            setThreads([]);\r\n        }\r\n    }\r\n\r\n    async function createThread() {\r\n        let token = await getAuthToken();\r\n        let url = window.location.origin + window.location.pathname;\r\n        console.log({\r\n            token,\r\n            title: inputTitleRef.current.value,\r\n            description: inputDescriptionRef.current.value,\r\n            members: inputMembersRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            moderators: inputModeratorsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            keywords: inputKeywordsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            isReadPublic: isReadPublicRef.current.checked,\r\n            isWritePublic: isWritePublicRef.current.checked,\r\n        })\r\n        let resp = await convo.threads.create(\r\n            signerAddress,\r\n            token,\r\n            inputTitleRef.current.value,\r\n            inputDescriptionRef.current.value,\r\n            url,\r\n            isReadPublicRef.current.checked,\r\n            isWritePublicRef.current.checked,\r\n            inputMembersRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            inputModeratorsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            inputKeywordsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n        );\r\n        console.log(resp);\r\n    }\r\n\r\n    if (signerAddress === \"\") {\r\n        return (<TabShell>\r\n            Login to view Private Threads.\r\n        </TabShell>)\r\n    }\r\n    else if (activeScreen === 'home') {\r\n\r\n        return (\r\n            <TabShell>\r\n                <Flex flexDirection=\"row\" marginTop=\"5px\" marginBottom=\"5px\">\r\n                    <br />\r\n                    <IconButton onClick={() => { setActiveScreen('create') }} size=\"sm\">\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                    <Input width=\"100%\" ref={searchInput} onChange={() => {\r\n                        setSearchString(searchInput.current.value);\r\n                    }} />\r\n                    <IconButton onClick={() => { refreshThreads() }} size=\"sm\">\r\n                        <ReloadIcon />\r\n                    </IconButton>\r\n                </Flex>\r\n                {\r\n                    Boolean(threads) === false && (\r\n                        <Flex width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n                            <div class=\"loader\"></div>\r\n                        </Flex>\r\n                    )\r\n                }\r\n                {\r\n                    Boolean(threads) === true && threads.length <= 0 && (\r\n                        <p>No threads.</p>\r\n                    )\r\n                }\r\n                {\r\n                    Boolean(threads) === true && threads.length > 0 && (\r\n                        <Flex flexDirection=\"column\">                    {\r\n                            Boolean(threads) === true && threads.length > 0 && threads.map(t => {\r\n                                return (\r\n                                    <Flex\r\n                                        display={t.title.toLowerCase().includes(searchString.toLowerCase()) === true ? \"flex\" : \"none\"}\r\n                                        key={t._id}\r\n                                        textAlign=\"left\"\r\n                                        paddingTop=\"5px\"\r\n                                        paddingBottom=\"5px\"\r\n                                        paddingRight=\"10px\"\r\n                                        paddingLeft=\"10px\"\r\n                                        marginTop=\"5px\"\r\n                                        marginBottom=\"5px\"\r\n                                        marginRight=\"5px\"\r\n                                        marginLeft=\"5px\"\r\n                                        backgroundColor=\"#ffffff42\"\r\n                                        borderRadius=\"10px\"\r\n                                        cursor=\"pointer\"\r\n                                        onClick={() => {\r\n                                            setActiveScreen('viewThread');\r\n                                            setscreenData(t);\r\n                                        }}\r\n                                    >\r\n                                        {decodeURIComponent(t.title)}\r\n                                    </Flex>\r\n                                )\r\n                            })\r\n                        }\r\n                        </Flex>\r\n                    )\r\n                }\r\n            </TabShell>\r\n        );\r\n\r\n    }\r\n    else if (activeScreen === 'viewThread') {\r\n        return (\r\n            <TabShell>\r\n                <Flex flexDirection=\"row\">\r\n                    <p onClick={() => { setActiveScreen('home') }}>Back</p>\r\n                </Flex>\r\n                <ThreadView screenData={screenData} />\r\n            </TabShell>\r\n        )\r\n    }\r\n    else if (activeScreen === 'create') {\r\n\r\n        return (\r\n            <TabShell>\r\n\r\n                <Flex flexDirection=\"column\" margin=\"10px\">\r\n                    <Flex flexDirection=\"row\" textAlign=\"center\" marginBottom=\"4px\" justifyContent=\"space-between\">\r\n                        <p onClick={() => { setActiveScreen('home') }} style={{ margin: \"0px\" }}>Back</p>\r\n                        <p style={{ margin: \"0px\" }}>Create a New Thread</p>\r\n                        <p style={{ margin: \"0px\", visibility: \"hidden\" }}>Nodisp</p>\r\n                    </Flex>\r\n                    <Flex flexDirection=\"column\" textAlign=\"left\" marginBottom=\"4px\">\r\n                        <p style={{ margin: \"0px\" }}>Title</p>\r\n                        <Input width=\"97%\" defaultValue=\"Title\" ref={inputTitleRef} />\r\n                    </Flex>\r\n                    <Flex flexDirection=\"column\" textAlign=\"left\" marginBottom=\"4px\">\r\n                        <p style={{ margin: \"0px\" }}>Description</p>\r\n                        <Input width=\"97%\" defaultValue=\"Desc\" ref={inputDescriptionRef} />\r\n                    </Flex>\r\n                    <Flex flexDirection=\"column\" textAlign=\"left\" marginBottom=\"4px\">\r\n                        <p style={{ margin: \"0px\" }}>Members</p>\r\n                        <Input width=\"97%\" defaultValue=\"0x707aC3937A9B31C225D8C240F5917Be97cab9F20\" ref={inputMembersRef} />\r\n                    </Flex>\r\n                    <Flex flexDirection=\"column\" textAlign=\"left\" marginBottom=\"4px\">\r\n                        <p style={{ margin: \"0px\" }}>Moderators</p>\r\n                        <Input width=\"97%\" defaultValue=\"0x707aC3937A9B31C225D8C240F5917Be97cab9F20\" ref={inputModeratorsRef} />\r\n                    </Flex>\r\n                    <Flex flexDirection=\"column\" textAlign=\"left\" marginBottom=\"4px\">\r\n                        <p style={{ margin: \"0px\" }}>Keywords</p>\r\n                        <Input width=\"97%\" defaultValue=\"one, two,3\" ref={inputKeywordsRef} />\r\n                    </Flex>\r\n                    <br />\r\n                    <Flex flexDirection=\"row\" alignItems=\"center\">\r\n                        <Flex flexDirection=\"column\" width=\"50%\">\r\n                            <Input width=\"100%\" type=\"checkbox\" ref={isReadPublicRef} />\r\n                            <span>Read Public</span>\r\n                        </Flex>\r\n                        <Flex flexDirection=\"column\" width=\"50%\">\r\n                            <Input width=\"100%\" type=\"checkbox\" ref={isWritePublicRef} />\r\n                            <span>Write Public</span>\r\n                        </Flex>\r\n                    </Flex>\r\n                    <br />\r\n                    <ButtonStyled onClick={createThread} width=\"97%\" minH=\"40px\" background=\"linear-gradient(163deg,rgb(0 255 72) -258.34%,rgb(133 231 137 / 47%) 100.95%);\">\r\n                        Create\r\n                    </ButtonStyled>\r\n                </Flex>\r\n\r\n\r\n            </TabShell>\r\n        );\r\n\r\n    }\r\n    else {\r\n\r\n        return (\r\n            <p>\r\n                Personal Meesages\r\n            </p>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Personal;\r\n","__webpack_require__.h = () => (\"a09d70036629a5a656b0\")"],"names":[],"sourceRoot":""}