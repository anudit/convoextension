{"version":3,"file":"contentScript.6cf0176c3a157f90cb3d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAQA;;AAYA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAfA;AAAA;AAAA;;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AADA;AACA;;AACA;AACA;AACA;AAEA;AACA;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAHA;AAAA;AAqBA;AAAA;AACA;AAAA;AACA;AAAA;;AAvBA;AAaA;AAYA;;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BA;AAAA;;AAuDA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;;AA5IA;;AA8IA;AAAA;;;;;;;;;;AAlKA;AAQA;AAYA;;;;;;;;;;;;;;;;;AC1BA","sources":["webpack://convoextension/./src/pages/Content/sections/personal.jsx","webpack://convoextension/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button, Flex } from '../../../components/Base';\r\nimport TabShell from '../../../components/TabShell';\r\nimport { Web3Context } from '../../../contexts/Web3Context';\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    margin: 4px;\r\n    border-radius: 10px;\r\n    border: none;\r\n    height: 30px;\r\n`;\r\n\r\nconst IconButton = styled.button`\r\n    min-width: 50px !important;\r\n    height: 50px !important;\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: #ffffff70;\r\n    border-radius: 100px;\r\n    border:none;\r\n    padding:8px;\r\n`;\r\n\r\nfunction Contacts() {\r\n\r\n    const { signerAddress, convo, getAuthToken } = useContext(Web3Context);\r\n    let [threads, setThreads] = useState(null);\r\n    const [activeScreen, setActiveScreen] = useState('home');\r\n    const inputTitleRef = useRef();\r\n    const inputDescriptionRef = useRef();\r\n    const inputMembersRef = useRef();\r\n    const inputModeratorsRef = useRef();\r\n    const inputKeywordsRef = useRef();\r\n    const isReadPublicRef = useRef();\r\n    const isWritePublicRef = useRef();\r\n\r\n    useEffect(() => {\r\n        refreshThreads();\r\n    }, [])\r\n\r\n    async function refreshThreads() {\r\n        let threadsData = await convo.threads.query({ member: signerAddress });\r\n        if (threadsData?.success === true) {\r\n            setThreads(threadsData);\r\n        }\r\n        else {\r\n            setThreads([]);\r\n        }\r\n    }\r\n\r\n    async function createThread() {\r\n        let token = await getAuthToken();\r\n        let url = window.location.origin + window.location.pathname;\r\n        console.log({\r\n            token,\r\n            title: inputTitleRef.current.value,\r\n            description: inputDescriptionRef.current.value,\r\n            members: inputMembersRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            moderators: inputModeratorsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            keywords: inputKeywordsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            isReadPublic: isReadPublicRef.current.checked,\r\n            isWritePublic: isWritePublicRef.current.checked,\r\n        })\r\n        let resp = await convo.threads.create(\r\n            signerAddress,\r\n            token,\r\n            inputTitleRef.current.value,\r\n            inputDescriptionRef.current.value,\r\n            url,\r\n            isReadPublicRef.current.checked,\r\n            isWritePublicRef.current.checked,\r\n            inputMembersRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            inputModeratorsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n            inputKeywordsRef.current.value.split(',').map((s) => { return s.trim() }),\r\n        );\r\n        console.log(resp);\r\n    }\r\n\r\n    if (signerAddress === \"\") {\r\n        return (<TabShell>\r\n            Login to view Private Threads.\r\n        </TabShell>)\r\n    }\r\n    else if (activeScreen === 'home') {\r\n\r\n        return (\r\n            <TabShell>\r\n                <Flex display=\"flex\" flexDirection=\"row\">\r\n                    <Input width=\"100%\" />\r\n                    <IconButton onClick={() => { setActiveScreen('create') }} > +</IconButton>\r\n                    <IconButton onClick={() => { refreshThreads() }} > r</IconButton>\r\n                </Flex>\r\n                <ul>\r\n                    {\r\n                        Boolean(threads) === false && (\r\n                            <li>loading...</li>\r\n                        )\r\n                    }\r\n                    {\r\n                        Boolean(threads) === true && threads.length <= 0 && (\r\n                            <li>No threads.</li>\r\n                        )\r\n                    }\r\n                    {\r\n                        Boolean(threads) === true && threads.length > 0 && threads.map(thread => {\r\n                            return (\r\n                                <li>{thread.title}</li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </TabShell>\r\n        );\r\n\r\n    }\r\n    else if (activeScreen === 'create') {\r\n\r\n        return (\r\n            <TabShell>\r\n                <Flex display=\"flex\" flexDirection=\"row\">\r\n                    <p onClick={() => { setActiveScreen('home') }}>Back</p>\r\n                </Flex>\r\n\r\n                title\r\n                <Input width=\"100%\" defaultValue=\"Title\" ref={inputTitleRef} />\r\n\r\n                description\r\n                <Input width=\"100%\" defaultValue=\"Desc\" ref={inputDescriptionRef} />\r\n\r\n                members\r\n                <Input width=\"100%\" defaultValue=\"0x707aC3937A9B31C225D8C240F5917Be97cab9F20\" ref={inputMembersRef} />\r\n\r\n                moderators\r\n                <Input width=\"100%\" defaultValue=\"0x707aC3937A9B31C225D8C240F5917Be97cab9F20\" ref={inputModeratorsRef} />\r\n\r\n                keywords\r\n                <Input width=\"100%\" defaultValue=\"one, two,3\" ref={inputKeywordsRef} />\r\n\r\n                isReadPublic\r\n                <Input width=\"100%\" type=\"checkbox\" ref={isReadPublicRef} />\r\n\r\n                isWritePublic\r\n                <Input width=\"100%\" type=\"checkbox\" ref={isWritePublicRef} />\r\n\r\n                <br />\r\n                <Button onClick={createThread}>\r\n                    CREATE\r\n                </Button>\r\n\r\n            </TabShell>\r\n        );\r\n\r\n    }\r\n    else {\r\n\r\n        return (\r\n            <p>\r\n                Personal Meesages\r\n            </p>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Contacts;\r\n","__webpack_require__.h = () => (\"facf7df6d99223b1c68b\")"],"names":[],"sourceRoot":""}